// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getUserData –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞
import { getUserData, waitForTelegram, showPreloader, hidePreloader, waitForTelegramReady, setPreloaderText } from '../telegram.js';
import { render } from '../utils/render.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ localStorage
const getCartItems = async () => {
    const { id } = await getUserData()
    const raw = localStorage.getItem(id)
    if (!raw) return []
    try { return JSON.parse(raw) } catch { return [] }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ ID
const getProductInfo = async (productId) => {
    try {
        const response = await fetch('../goods.json')
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤')

        const goods = await response.json()
        return goods.find(product => product.id == productId)
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ:', error)
        return null
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
const removeFromCart = async (productId) => {
    const user = await getUserData()
    const productListString = localStorage.getItem(user.id)
    if (!productListString) return []

    const productList = JSON.parse(productListString)
    const index = productList.findIndex(p => p.id == productId)

    if (index > -1) {
        productList.splice(index, 1);
        localStorage.setItem(user.id, JSON.stringify(productList));
    }

    return productList
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
const createCartItemHTML = (product, quantity) => {
    const totalPrice = parseFloat(product.price.replace(',', '.')) * quantity

    return `
        <div class="cart-item" data-product-id="${product.id}">
            <img src="${product.image_url}" alt="${product.name}" class="cart-item-image">
            <div class="cart-item-info">
                <div class="cart-item-name">${product.name}</div>
                <div class="cart-item-price">${product.price} ‚ÇΩ</div>
                <div class="cart-item-quantity">
                    <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity}</span>
                </div>
            </div>
            <div class="cart-item-total">${totalPrice.toFixed(2)} ‚ÇΩ</div>
            <button class="remove-item" data-product-id="${product.id}">–£–¥–∞–ª–∏—Ç—å</button>
        </div>
    `
}

const cartContainer = () => {
    return `
        <h1 class="cart-title">–ö–æ—Ä–∑–∏–Ω–∞</h1>
        
        <div class="cart-items" id="cart-items">
            <!-- –¢–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
        </div>
        
        <div class="cart-summary">
            <div class="cart-total">
                <span class="total-label">–ò—Ç–æ–≥–æ:</span>
                <span class="total-price" id="total-price">0 ‚ÇΩ</span>
            </div>
            <button class="checkout-button" id="checkout-button">–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</button>
        </div>
        
        <div class="empty-cart" id="empty-cart" style="display: none;">
            <p>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
            <a href="../index.html" class="continue-shopping">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏</a>
        </div>
    `
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä–∫–∞—Å–∞ –∫–æ—Ä–∑–∏–Ω—ã
const renderCartScaffold = () => {
    const container = document.querySelector('.cart-container')
    container.innerHTML = cartContainer()
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ DOM-—ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã
const getCartDomRefs = () => {
    return {
        cartItemsContainer: document.getElementById('cart-items'),
        emptyCartDiv: document.getElementById('empty-cart'),
        cartSummaryDiv: document.querySelector('.cart-summary'),
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É—Å—Ç–æ–π/–Ω–µ–ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã
const setEmptyCartState = (isEmpty, refs) => {
    const { cartItemsContainer, emptyCartDiv, cartSummaryDiv } = refs
    if (isEmpty) {
        cartItemsContainer.innerHTML = ''
        emptyCartDiv.style.display = 'block'
        cartSummaryDiv.style.display = 'none'
        return
    }
    emptyCartDiv.style.display = 'none'
    cartSummaryDiv.style.display = 'block'
}

// –†–µ–Ω–¥–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã (—á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —É—Ç–∏–ª–∏—Ç—É)
const renderCartItems = async (cartItems, container) => {
    await render({
        source: cartItems,
        container,
        template: async (cartItem) => {
            const productInfo = await getProductInfo(cartItem.id)
            if (!productInfo) return null
            return createCartItemHTML(productInfo, cartItem.count)
        },
        options: {
            clearContainer: true,
            afterInsert: (element) => addEventListenersToElement(element)
        }
    })
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
const attachCheckoutHandler = () => {
    const checkoutButton = document.getElementById('checkout-button')
    if (!checkoutButton || checkoutButton.hasAttribute('data-listener-added')) return

    console.log('Adding checkout button listener')
    checkoutButton.setAttribute('data-listener-added', 'true')
    checkoutButton.addEventListener('click', async () => {
        const cartItems = await getCartItems()
        if (cartItems.length === 0) {
            alert('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!')
            return
        }

        const user = await getUserData()
        const telegramLink = await createTelegramOrderLink(cartItems, user)

        if (telegramLink) {
            const telegramExists = typeof Telegram !== 'undefined' && Telegram && Telegram.WebApp
            if (telegramExists) {
                try {
                    Telegram.WebApp.openTelegramLink(telegramLink)
                } catch (error) {
                    window.location.href = telegramLink
                }
            } else {
                window.location.href = telegramLink
            }

            localStorage.removeItem(user.id)
            await updateCartDisplay()
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        }
    })
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã (–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä)
const updateCartDisplay = async () => {
    renderCartScaffold()
    const cartItems = await getCartItems()
    const refs = getCartDomRefs()

    const isEmpty = cartItems.length === 0
    setEmptyCartState(isEmpty, refs)
    if (isEmpty) return

    await renderCartItems(cartItems, refs.cartItemsContainer)
    await updateTotalSum()
    attachCheckoutHandler()
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—â–µ–π —Å—É–º–º—ã
const updateTotalSum = async () => {
    const cartItems = await getCartItems()
    let totalSum = 0

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ DOM –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    for (const cartItem of cartItems) {
        const cartItemElement = document.querySelector(`[data-product-id="${cartItem.id}"]`)
        if (cartItemElement) {
            const priceElement = cartItemElement.querySelector('.cart-item-price')
            if (priceElement) {
                const price = parseFloat(priceElement.textContent.replace(' ‚ÇΩ', '').replace(',', '.'))
                totalSum += price * cartItem.count
            }
        }
    }

    const totalPriceElement = document.getElementById('total-price')
    if (totalPriceElement) {
        totalPriceElement.textContent = `${totalSum.toFixed(2)} ‚ÇΩ`
    }
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
const buildOrderData = async (cartItems) => {
    const orderItems = []
    let totalSum = 0

    for (const cartItem of cartItems) {
        const productInfo = await getProductInfo(cartItem.id)
        if (!productInfo) continue

        const itemTotal = parseFloat(productInfo.price.replace(',', '.')) * cartItem.count
        totalSum += itemTotal
        orderItems.push({
            name: productInfo.name,
            price: productInfo.price,
            quantity: cartItem.count,
            total: itemTotal.toFixed(2),
        })
    }

    return { orderItems, totalSum }
}

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞
const buildOrderText = (orderItems, totalSum, userId) => {
    return `üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑*
        
üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* ID ${userId}
üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}

*–¢–æ–≤–∞—Ä—ã:*
${orderItems.map(item => `‚Ä¢ ${item.name} - ${item.price} ‚ÇΩ √ó ${item.quantity} = ${item.total} ‚ÇΩ`).join('\n')}

üí∞ *–ò—Ç–æ–≥–æ:* ${totalSum.toFixed(2)} ‚ÇΩ

---
_–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Mini App_`
}

// –°–±–æ—Ä–∫–∞ Telegram —Å—Å—ã–ª–∫–∏
const buildTelegramLink = (orderText, user) => {
    const encodedText = encodeURIComponent(orderText)
    const telegramUsername = localStorage.getItem('seller_username') || user.id
    return `https://t.me/${telegramUsername}?text=${encodedText}`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram —Å—Å—ã–ª–∫–∏ —Å –∑–∞–∫–∞–∑–æ–º
const createTelegramOrderLink = async (cartItems, user) => {
    try {
        const { orderItems, totalSum } = await buildOrderData(cartItems)
        const orderText = buildOrderText(orderItems, totalSum, user.id)
        return buildTelegramLink(orderText, user)
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram —Å—Å—ã–ª–∫–∏:', error)
        return null
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
const addEventListenersToElement = (element) => {
    console.log('Adding event listeners to element:', element)

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    const removeBtn = element.querySelector('.remove-item')
    if (removeBtn && !removeBtn.hasAttribute('data-listener-added')) {
        console.log('Adding remove button listener for product:', removeBtn.dataset.productId)
        removeBtn.setAttribute('data-listener-added', 'true')
        removeBtn.addEventListener('click', async (e) => {
            e.preventDefault()
            console.log('Remove button clicked for product:', e.target.dataset.productId)
            const productId = e.target.dataset.productId
            await removeFromCart(productId)
            await updateCartDisplay()
        })
    }
}


// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
showPreloader();
setPreloaderText('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
waitForTelegram(async () => {
    try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É...')

        // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp
        await waitForTelegramReady();

        await updateCartDisplay()

            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä
    hidePreloader();

    console.log('Cart: Application fully loaded');
} catch (error) {
    console.error('Error loading cart:', error);
    hidePreloader();
}

console.log('–ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!')
}) 